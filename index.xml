<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xxclick</title>
    <link>https://xxclick.github.io/</link>
    <description>Recent content on xxclick</description>
    <image>
      <title>xxclick</title>
      <url>https://xxclick.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://xxclick.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 25 Nov 2023 04:38:01 +0800</lastBuildDate>
    <atom:link href="https://xxclick.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>谈谈在谷歌的18年</title>
      <link>https://xxclick.github.io/post/post/reflecting_on_18_years_at_google/</link>
      <pubDate>Sat, 25 Nov 2023 04:38:01 +0800</pubDate>
      <guid>https://xxclick.github.io/post/post/reflecting_on_18_years_at_google/</guid>
      <description>原文🔗链接。翻译由Claude 2驱动，部分翻译有增删。
回顾在谷歌的18年 我在2005年10月加入谷歌，18年后提出辞职。上周是我在谷歌的最后一周。
我觉得自己很幸运能亲历谷歌上市后的早期；与大多数公司不同，也与流行的叙事相去甚远，从最基层员工直到高管，谷歌的员工真诚地以做正确的事为重要原则。&amp;ldquo;don&amp;rsquo;t be evil&amp;rdquo; 这一口号实际上是当时公司的指导原则(主要是反应到像微软这样以营利远高于客户和人类整体利益的运营方式)。
很多时候我看到谷歌受到批评，但那些行动本意都是为了社会利益。比如谷歌图书计划。当时对谷歌搜索和Chrome的很多批评，特别是涉及广告冲突的，本质上是失实的(我们常常会因为巧合和错误而被指责有恶意)。我常常看到隐私维护人士以实际上对用户不利的方式反对谷歌的一些建议。这些争执对整个世界产生了持久影响；最讨厌的一个就是我们今天必须浏览很多毫无意义的Cookie提示。我觉得很 frustrating，团队会真诚地推进一些对世界有好处的想法，但并不优先考虑谷歌的短期利益，结果在公众舆论场上还是受到怀疑。
早期的谷歌也是很好的工作环境。高管每周都会公开回答问题，或者坦诚无法回答的原因(比如出于法律原因或某些话题过于敏感)。施密特经常带领全公司审视董事会的讨论。产品的成功和失败都较为客观地介绍，成功采取庆祝，失败则深思，而不是指责他人。公司有明确的远见，偏离这个远见的行为都会给以解释。我曾在五年前的Netscape实习时体验过无能管理层，所以谷歌人才辈出、全员有能力，给我很强烈的冲击。
我在谷歌的前9年工作的是HTML和相关标准。我的任务是着眼于网页利益，因为对网页有利必对谷歌也有利(我明确被告知忽略谷歌本身的利益)。这继承了我在Opera Software开始的工作。谷歌为此工作提供了优良的平台。我的团队名义上是谷歌开源团队，但我实际上完全自主(这主要得益于Chris DiBona)。我的大部分工作都是使用笔记本电脑，在谷歌各个建筑物内完成。整整几年我都很少使用指定的座位。
随着时间的推移，谷歌的一些优势也出现了例外。例如我很欣赏Vic Gundotra的热情(以及他最初为Google+设想的愿景，如果未必每个人都能明确赞同，至少意图很明确)，但随着事情不如预期，他给出清晰答复的能力就下降了。他还在谷歌内部引入了“壁垒”，比如只允许Google+团队进入某些楼层，这明显与早期谷歌的完全透明形成对比。另一个例子是Android团队(最初是收购来的)，他们从未真正适应谷歌文化。Android的 work/life balance 很差，团队透明度不如旧区，更注重追随竞争对手而不是解决用户真实问题。
我后9年工作于Flutter。回顾这段时光，我记得最深刻的就是Flutter早期的日子。Flutter是拉里·佩奇在创建Alphabet前启动的一批宏野实验计划之一。我们实际上运行得像个初创公司，更多的是发现我们正在构建的东西，而不是设计它。Flutter团队很大程度上延续了年轻谷歌的文化，例如重视内部透明度、工作生活平衡以及以数据驱动决策(多亏了Tao Dong和他的用户体验小组UXR的很大帮助)。我们从一开始就非常开放，这让我们很容易围绕这个工作开展了一个健康的开源项目。Flutter也非常幸运，在多年里一直有优秀的领导，比如 Adam Barth 作为首席技术负责人，Tim Sneath 担任产品经理，以及Todd Volkert 担任工程经理。
我们前几年也没有遵循很好的工程最佳实践。例如我们一开始没有编写测试，文档也很匮乏。这块白板上记载的内容就是核心Widget、RenderObject和dart:ui层的&amp;quot;设计文档&amp;quot;。这当初让我们可以快速前进，但后来付出了代价。
与此同时，谷歌内部也发生变化。文化开始恶化。决策由考虑用户利益转向考虑谷歌本身，再转向决策者本身。透明度消失了。我以前会热切参加每次全员会议来了解情况，现在我已经能预测出高管会给出标准答案。今天，我不认识任何人能清楚解释谷歌的远见是什么。士气处于历史最低点。如果询问湾区的心理治疗师，他们会告诉你他们所有的谷歌客户都对谷歌感到不满。
其次是谷歌实施人员裁减。裁员是一个短视的错误，本意是保持股价每个季度持续增长，而不是遵循谷歌过去优先考虑长期成功的策略，即使会带来短期损失(这就是&amp;quot;don&amp;rsquo;t be evil&amp;quot;的精神)。裁员的后果很隐蔽。以前人们可能会考虑用户，或至少公司，相信做正确事情最终会得到回报，即便不一定是明确职责；但经历裁员后，人们再也不能信任公司会照顾他们，大幅收回任何冒险行为。责任会紧紧把持。知识会保存起来，因为成为不可或缺是保护自己免受未来裁员的唯一方法。我现在看到谷歌也是如此。管理层失信表现在不再信任员工，通过一些毫无意义的公司政策。2004年，谷歌的创始人曾告诉华尔街说&amp;quot;谷歌不会成为一个传统公司。我们不会成为一个传统公司。&amp;ldquo;但谷歌已经不复存在了。
如今，谷歌的大部分问题都源于桑达尔·皮查伊 (Sundar Pichai) 缺乏有远见的领导力，以及他对维护早期谷歌的文化规范显然缺乏兴趣。这种现象的一个症状是无能的中层管理队伍的不断扩大。以 Jeanine Banks 为例，她管理的部门中混乱地包含（除其他外）Flutter、Dart、Go 和 Firebase。她主导的部门策略看起来就很混乱，我即使真的想泄露也无法弄明白它的任何一部分意思，尽管听她描述了几年。她对下属团队的工作理解程度最多只能算表面，她经常提出完全不合逻辑和不适用的要求。她以一种非人化的方式对工程师进行管理，任意调动人员而与其专业能力没有关系。她完全不能接受建设性反馈(字面意思就是她根本不做反应)。我听说其他管理能力更强的团队已经学会如何&amp;quot;调控&amp;quot;她，及时提供适当信息以躲开她的骚扰。作为曾见识过谷歌最好时光的人，我觉得现状很让人沮丧。
当然，谷歌仍有很多优秀的人才。我很荣幸在Flutter团队与JaYoung Lee、Kate Lovett、Kevin Chisholm、Zoey Fan、Dan Field 以及其他大批同事(对不起，我知道我应该一个个叫出你们的名字，但你们太多了)共事。这些年我开始为谷歌内部任何人提供职业建议，因此认识了公司很多优秀人才。谷歌完全有可能恢复旧日文化。这需要在公司高层进行一定的调整，将权力中心从CFO办公室重新拉回一个对未来有明确远见的人，利用谷歌丰富资源为用户创造价值。我仍然相信谷歌的使命(即组织世界信息，使之普遍可及和有用)还有很大潜力。如果有人愿意领导谷歌迈向未来20年，致力于优化对人类的贡献并忽略短期股价波动，他们就能利用谷歌人才和激情实现真正伟大的成就。
不过，我确实认为时钟正在滴答作响。如果文化继续恶化，谷歌将无法恢复。因为维持文化需要的那些具有道德观点的人，正是不会加入没有道德准则的组织的人。</description>
    </item>
    <item>
      <title>谈谈在谷歌的18年</title>
      <link>https://xxclick.github.io/post/reflecting_on_18_years_at_google/</link>
      <pubDate>Sat, 25 Nov 2023 04:38:01 +0800</pubDate>
      <guid>https://xxclick.github.io/post/reflecting_on_18_years_at_google/</guid>
      <description>原文🔗链接。翻译由Claude 2驱动，部分翻译有增删。
回顾在谷歌的18年 我在2005年10月加入谷歌，18年后提出辞职。上周是我在谷歌的最后一周。
我觉得自己很幸运能亲历谷歌上市后的早期；与大多数公司不同，也与流行的叙事相去甚远，从最基层员工直到高管，谷歌的员工真诚地以做正确的事为重要原则。&amp;ldquo;don&amp;rsquo;t be evil&amp;rdquo; 这一口号实际上是当时公司的指导原则(主要是反应到像微软这样以营利远高于客户和人类整体利益的运营方式)。
很多时候我看到谷歌受到批评，但那些行动本意都是为了社会利益。比如谷歌图书计划。当时对谷歌搜索和Chrome的很多批评，特别是涉及广告冲突的，本质上是失实的(我们常常会因为巧合和错误而被指责有恶意)。我常常看到隐私维护人士以实际上对用户不利的方式反对谷歌的一些建议。这些争执对整个世界产生了持久影响；最讨厌的一个就是我们今天必须浏览很多毫无意义的Cookie提示。我觉得很 frustrating，团队会真诚地推进一些对世界有好处的想法，但并不优先考虑谷歌的短期利益，结果在公众舆论场上还是受到怀疑。
早期的谷歌也是很好的工作环境。高管每周都会公开回答问题，或者坦诚无法回答的原因(比如出于法律原因或某些话题过于敏感)。施密特经常带领全公司审视董事会的讨论。产品的成功和失败都较为客观地介绍，成功采取庆祝，失败则深思，而不是指责他人。公司有明确的远见，偏离这个远见的行为都会给以解释。我曾在五年前的Netscape实习时体验过无能管理层，所以谷歌人才辈出、全员有能力，给我很强烈的冲击。
我在谷歌的前9年工作的是HTML和相关标准。我的任务是着眼于网页利益，因为对网页有利必对谷歌也有利(我明确被告知忽略谷歌本身的利益)。这继承了我在Opera Software开始的工作。谷歌为此工作提供了优良的平台。我的团队名义上是谷歌开源团队，但我实际上完全自主(这主要得益于Chris DiBona)。我的大部分工作都是使用笔记本电脑，在谷歌各个建筑物内完成。整整几年我都很少使用指定的座位。
随着时间的推移，谷歌的一些优势也出现了例外。例如我很欣赏Vic Gundotra的热情(以及他最初为Google+设想的愿景，如果未必每个人都能明确赞同，至少意图很明确)，但随着事情不如预期，他给出清晰答复的能力就下降了。他还在谷歌内部引入了“壁垒”，比如只允许Google+团队进入某些楼层，这明显与早期谷歌的完全透明形成对比。另一个例子是Android团队(最初是收购来的)，他们从未真正适应谷歌文化。Android的 work/life balance 很差，团队透明度不如旧区，更注重追随竞争对手而不是解决用户真实问题。
我后9年工作于Flutter。回顾这段时光，我记得最深刻的就是Flutter早期的日子。Flutter是拉里·佩奇在创建Alphabet前启动的一批宏野实验计划之一。我们实际上运行得像个初创公司，更多的是发现我们正在构建的东西，而不是设计它。Flutter团队很大程度上延续了年轻谷歌的文化，例如重视内部透明度、工作生活平衡以及以数据驱动决策(多亏了Tao Dong和他的用户体验小组UXR的很大帮助)。我们从一开始就非常开放，这让我们很容易围绕这个工作开展了一个健康的开源项目。Flutter也非常幸运，在多年里一直有优秀的领导，比如 Adam Barth 作为首席技术负责人，Tim Sneath 担任产品经理，以及Todd Volkert 担任工程经理。
我们前几年也没有遵循很好的工程最佳实践。例如我们一开始没有编写测试，文档也很匮乏。这块白板上记载的内容就是核心Widget、RenderObject和dart:ui层的&amp;quot;设计文档&amp;quot;。这当初让我们可以快速前进，但后来付出了代价。
与此同时，谷歌内部也发生变化。文化开始恶化。决策由考虑用户利益转向考虑谷歌本身，再转向决策者本身。透明度消失了。我以前会热切参加每次全员会议来了解情况，现在我已经能预测出高管会给出标准答案。今天，我不认识任何人能清楚解释谷歌的远见是什么。士气处于历史最低点。如果询问湾区的心理治疗师，他们会告诉你他们所有的谷歌客户都对谷歌感到不满。
其次是谷歌实施人员裁减。裁员是一个短视的错误，本意是保持股价每个季度持续增长，而不是遵循谷歌过去优先考虑长期成功的策略，即使会带来短期损失(这就是&amp;quot;don&amp;rsquo;t be evil&amp;quot;的精神)。裁员的后果很隐蔽。以前人们可能会考虑用户，或至少公司，相信做正确事情最终会得到回报，即便不一定是明确职责；但经历裁员后，人们再也不能信任公司会照顾他们，大幅收回任何冒险行为。责任会紧紧把持。知识会保存起来，因为成为不可或缺是保护自己免受未来裁员的唯一方法。我现在看到谷歌也是如此。管理层失信表现在不再信任员工，通过一些毫无意义的公司政策。2004年，谷歌的创始人曾告诉华尔街说&amp;quot;谷歌不会成为一个传统公司。我们不会成为一个传统公司。&amp;ldquo;但谷歌已经不复存在了。
如今，谷歌的大部分问题都源于桑达尔·皮查伊 (Sundar Pichai) 缺乏有远见的领导力，以及他对维护早期谷歌的文化规范显然缺乏兴趣。这种现象的一个症状是无能的中层管理队伍的不断扩大。以 Jeanine Banks 为例，她管理的部门中混乱地包含（除其他外）Flutter、Dart、Go 和 Firebase。她主导的部门策略看起来就很混乱，我即使真的想泄露也无法弄明白它的任何一部分意思，尽管听她描述了几年。她对下属团队的工作理解程度最多只能算表面，她经常提出完全不合逻辑和不适用的要求。她以一种非人化的方式对工程师进行管理，任意调动人员而与其专业能力没有关系。她完全不能接受建设性反馈(字面意思就是她根本不做反应)。我听说其他管理能力更强的团队已经学会如何&amp;quot;调控&amp;quot;她，及时提供适当信息以躲开她的骚扰。作为曾见识过谷歌最好时光的人，我觉得现状很让人沮丧。
当然，谷歌仍有很多优秀的人才。我很荣幸在Flutter团队与JaYoung Lee、Kate Lovett、Kevin Chisholm、Zoey Fan、Dan Field 以及其他大批同事(对不起，我知道我应该一个个叫出你们的名字，但你们太多了)共事。这些年我开始为谷歌内部任何人提供职业建议，因此认识了公司很多优秀人才。谷歌完全有可能恢复旧日文化。这需要在公司高层进行一定的调整，将权力中心从CFO办公室重新拉回一个对未来有明确远见的人，利用谷歌丰富资源为用户创造价值。我仍然相信谷歌的使命(即组织世界信息，使之普遍可及和有用)还有很大潜力。如果有人愿意领导谷歌迈向未来20年，致力于优化对人类的贡献并忽略短期股价波动，他们就能利用谷歌人才和激情实现真正伟大的成就。
不过，我确实认为时钟正在滴答作响。如果文化继续恶化，谷歌将无法恢复。因为维持文化需要的那些具有道德观点的人，正是不会加入没有道德准则的组织的人。</description>
    </item>
    <item>
      <title>为什么我离开谷歌开始独立工作</title>
      <link>https://xxclick.github.io/post/post/quit_google/</link>
      <pubDate>Fri, 01 Sep 2023 05:12:03 +0800</pubDate>
      <guid>https://xxclick.github.io/post/post/quit_google/</guid>
      <description>原文🔗链接。翻译由Claude 2驱动，部分翻译有增删。
为什么我离开谷歌开始独立工作 前两年 两年后,我已经很喜欢谷歌了。 每年员工调查问我5年后是否还会留在谷歌,我当然会说“是”了。 当然5年后我还会在谷歌。我周围都是世界最优秀的工程师,使用世界最先进的开发工具,吃着世界上最自由的食物。 最近一次绩效评估给了我“超额完成”。如果我继续工作,很快就会晋升为高级软件工程师。这是一个很酷的头衔! 以后我的职业生涯,都可以说“是的,我曾经是谷歌的高级软件工程师”。人们会很惊叹的。 我的经理保证说,我很快就可以晋升了。他觉得我已经有资格担任高级工作。我只需要一个正确的项目来证明给评审委员会看。
你的经理不能提你的升职吗? 不,谷歌的经理不能直接决定下属员工的升职。他们连投票权都没有。 相反,升职决定来自由高级软件工程师和经理组成的小评Small committees 审委员会做出。 你需要准备“升职文件”申请升职:包括队友的书面推荐,你制作的设计文件以及自我阐述为什么你的工作 merits 资格升级。 然后评审委员会会审核你和其他几个人的文件,花一整天时间决定谁可以升职,谁不行。 在前两年的“蜜月期”,这个体系对我来说听起来很公平。当然我的命运应该由从来没见过我的神秘委员会决定。他们不会因为偏见或政治考虑而做出不公正的决定。他们会通过高质量的代码和睿智的工程决定,看到我的本质。
事实并不完全如此 在准备第一个升职申请书之前,我从没想过这个过程的具体运作流程。 在我脑海中,评审委员会是全知全能公正的实体。只要我每天选择正确的问题进行解决,优化代码库,助力团队运营,委员会就会神奇地知道这一切,并奖励我。 不出所料,事实并非如此。而且我用了两年时间才意识到。
开始时还很笨拙 那时我主要负责一个陈年旧系统。系统几年来一直在维护模式下,但是负载不断增加,系统已经开始承受不住压力。它经常会默默崩溃或者输出错误数据。由于从一开始就没有更新设计文档,定位问题通常需要几天时间。 我自豪且细心地帮这个系统重拾健康。我修复了几十个Bug,并编写自动化测试以确保Bug不再出现。我删除了几千行 either 死代码或可以用现代库来替代的代码。我根据自己学习到的知识对系统进行了文档记录,而不再像过去那样仅仅留在我一个人脑子里。 但是,问题来了。到升职评估时,我就发现所有这些工作都无法量化。我无法证明自己为谷歌创造了什么正面影响。
如果没有指标记录,那就没有发生过 这个系统没有记录太多指标。记录的那些指标会使得情况变得更糟了。我发现的Bug会导致其他的bug，总Bug数量一直在增加。系统失败次数增加,因为我需要记录指标,而不是快速的修复bug。我大大缩短了开发人员修复失败所花费的时间,但没有指标可以追踪开发人员时间。 我其他工作在纸面上也不看起来很出色。几次,我为了帮助一个团队成员即将上线的重要项目,将自己的项目搁浅数周甚至几个月。对团队来说这是正确的决定,但是在升职申请书中看起来并不够引人注意。在评审委员会看来,我那个同事的项目才是需要多个开发人员协调的大型重要工作。如果他们说动我来帮忙,那就说明他具备很强的领导力。我只是可有可无的临时工,工作都可以被随时打断。 我提交了第一个升职申请,结果恰如我预期:评审委员会说我没有证明自己能处理技术复杂性,也看不出我为谷歌创造了什么影响。
从拒绝中吸取教训 这次拒绝对我来说是一个沉重的打击,但我并不灰心。我觉得自己的工作水平高于级别,但是评审委员会看不到。这样的问题是可以解决的。 我决定以前两年做得太天真了。我不应该假设工作产出就能自动留下足迹。现在我了解这个过程了,我可以继续进行同样高质量的工作,但需要更好地记录。 例如,我们团队收到很多扰人的邮件报警。以前的我直接解决问题就好了。但是现在我明白,如果想在升职申请中体现这项工作,首先需要设置指标,留下历史报警频率记录。到升职时候,我就可以拿出一个报警数量逐渐下降的漂亮图表。 不久后,我获得了一个看起来很有希望的项目。这个项目深度依赖机器学习——在谷歌一直很流行的技术。它可以自动化几百名操作人员曾手动进行的任务,所以对谷歌影响明显可量化。此外,这个项目还需要我带领一个初级开发人员全程参与,这种情况通常评审委员会都看好。
圣诞礼物的启发 几个月后,谷歌停止长期以来向所有员工发放奢侈圣诞礼物的传统,这个举动曾引起很大媒体报道。这次他们将礼品预算投入Advertisement,假借慈善名义向一些贫困校园赠送Chromebook电脑。 随后,我听到两个员工的对话: 员工A说:实质上你还是获得了礼物。这类节省成本的举动会增加谷歌股票的价值。你可以选择卖掉股票奖励买任何你喜欢的礼物。 员工B说:如果我告诉我妻子,我不给她买圣诞礼物,但她可以使用我们银行账户里的钱买任何礼物,你觉得怎么样? 员工A说:你和谷歌只是一种商业关系。如果你因为谷歌不像你对妻子一样用“礼物浪漫”对待你,那么你对这种关系有个误导的看法。 等等,我和谷歌真的是一种商业关系。 这可能听起来很奇怪,需过了两年半我才意识到。实际上谷歌工作里也为了给员工营造一种共同体感。让他们感觉不仅仅是员工,而是谷歌的一份子。 但是这个对话让我意识到,我不是谷歌。我向谷歌提供服务,交换的是报酬。 所以,如果我和谷歌只是一种双向服务彼此利益的商业关系,那么我为什么过去会花时间做一些只为谷歌服务而不是自己的任务?既然评审委员会不奖励Bug修复和团队支持工作,我为什么要这么做?
优先考虑升职 首次升职失败教会我一个错误的教训。我以为只要继续做同样的工作但记录得更充分,就可以让评审委员会看好。实际上我应该做相反的事:弄清楚评审委员会期待什么,然后只做那类工作。 于是我采取了新的策略。开始任何任务前,我首先问自己这个任务是否有助于我升职。如果答案是否定的,我就不进行该任务。 我对代码质量的标准也从“这个可以维护5年吗”降低到“到我升职之前能撑住吗?”。我除非Bug有影响项目上线才解决。我抽身所有的维护工作。我减少访谈新人的次数。从每周1-2次降低到零次。
然后我的项目被取消了 优先顺序改变了。管理层把我的项目转给了印度分部队友。相应地,他们把一个项目让给我们。系统文档不完整,基础设施已被弃用,但它在生产中仍然是一个重要组件。我被要求分离系统,迁移到新框架,同时保证生产运行和性能指标。 就升职而言,这意味着任务推迟几个月。由于以前的项目没有上线任何东西,我花在上面的两个月时间一文不值。只要几周时间才能了解新系统,继而可能会浪费几个月 maintaining它。
我到底在做什么? 这是半年内第三次,经理在我项目进行半道就重新安排。每次他都说不是我工作质量的问题,而是高层战略或人员配置发生变化。 于是我从高层次思考这个问题。不考虑经理,也不考虑他的上司,更不考虑评审委员会。如果只看我和谷歌之间,我们的“商业关系”为何? 事实是,谷歌一而再再而三地告诉我,只有完成整个项目才能评判我的工作。但是我实际上无法完成任何项目,因为谷歌经常在过程中中断安排新任务。这种动态感觉很荒谬。 我的职业前途完全被一个匿名委员会把控,他们思考我不过一个小时。而我无法参与的管理决定则抹掉我几个月的工作成果。 最坏的是,我不再为工作感到自豪。不是问自己“如何解决这个有挑战的问题”,而是问“如何让这个问题看起来很难引起升职注意”。我恨这种感觉。 即使被升职,之后又如何?据说 each级别的升职难度成指数级增长。如果想在职业生涯继续前进,我必须承担更大范围和更多合作团队的项目。但是这就意味着失败因素更多,得花上月甚至年的时间才能完成。
有什么可选方案吗? 正是在这个时候,我发现了Indie Hackers社区。 它是一个面向独立软件创业者的网络社区。强调“小”。这些人不是像扎克伯格那样的梦想家,而是想搞创业维持生计的人。 我一直对独立软件公司很感兴趣,但我以为创业只有硅谷那一条路——忙于募资和担心如何吸引下一批用户。 Indie Hackers提供了一个吸引我的替代方案。大多数成员都是用自己积蓄或夜间副业的方式建立生意。他们不必回应投资人,也不必向匿名委员会证明自己。 当然也有 défauts,收入不如稳定,面临的风险更多。但这些创业者掌控自己的命运,不管生意进展如何,都由自己主导。而在谷歌,我感觉自己无法控制项目、职场进展或者团队方向。 我经过数月的思考,决定要成为一个Indie Hacker。</description>
    </item>
    <item>
      <title>为什么我离开谷歌开始独立工作</title>
      <link>https://xxclick.github.io/post/quit_google/</link>
      <pubDate>Fri, 01 Sep 2023 05:12:03 +0800</pubDate>
      <guid>https://xxclick.github.io/post/quit_google/</guid>
      <description>原文🔗链接。翻译由Claude 2驱动，部分翻译有增删。
为什么我离开谷歌开始独立工作 前两年 两年后,我已经很喜欢谷歌了。 每年员工调查问我5年后是否还会留在谷歌,我当然会说“是”了。 当然5年后我还会在谷歌。我周围都是世界最优秀的工程师,使用世界最先进的开发工具,吃着世界上最自由的食物。 最近一次绩效评估给了我“超额完成”。如果我继续工作,很快就会晋升为高级软件工程师。这是一个很酷的头衔! 以后我的职业生涯,都可以说“是的,我曾经是谷歌的高级软件工程师”。人们会很惊叹的。 我的经理保证说,我很快就可以晋升了。他觉得我已经有资格担任高级工作。我只需要一个正确的项目来证明给评审委员会看。
你的经理不能提你的升职吗? 不,谷歌的经理不能直接决定下属员工的升职。他们连投票权都没有。 相反,升职决定来自由高级软件工程师和经理组成的小评Small committees 审委员会做出。 你需要准备“升职文件”申请升职:包括队友的书面推荐,你制作的设计文件以及自我阐述为什么你的工作 merits 资格升级。 然后评审委员会会审核你和其他几个人的文件,花一整天时间决定谁可以升职,谁不行。 在前两年的“蜜月期”,这个体系对我来说听起来很公平。当然我的命运应该由从来没见过我的神秘委员会决定。他们不会因为偏见或政治考虑而做出不公正的决定。他们会通过高质量的代码和睿智的工程决定,看到我的本质。
事实并不完全如此 在准备第一个升职申请书之前,我从没想过这个过程的具体运作流程。 在我脑海中,评审委员会是全知全能公正的实体。只要我每天选择正确的问题进行解决,优化代码库,助力团队运营,委员会就会神奇地知道这一切,并奖励我。 不出所料,事实并非如此。而且我用了两年时间才意识到。
开始时还很笨拙 那时我主要负责一个陈年旧系统。系统几年来一直在维护模式下,但是负载不断增加,系统已经开始承受不住压力。它经常会默默崩溃或者输出错误数据。由于从一开始就没有更新设计文档,定位问题通常需要几天时间。 我自豪且细心地帮这个系统重拾健康。我修复了几十个Bug,并编写自动化测试以确保Bug不再出现。我删除了几千行 either 死代码或可以用现代库来替代的代码。我根据自己学习到的知识对系统进行了文档记录,而不再像过去那样仅仅留在我一个人脑子里。 但是,问题来了。到升职评估时,我就发现所有这些工作都无法量化。我无法证明自己为谷歌创造了什么正面影响。
如果没有指标记录,那就没有发生过 这个系统没有记录太多指标。记录的那些指标会使得情况变得更糟了。我发现的Bug会导致其他的bug，总Bug数量一直在增加。系统失败次数增加,因为我需要记录指标,而不是快速的修复bug。我大大缩短了开发人员修复失败所花费的时间,但没有指标可以追踪开发人员时间。 我其他工作在纸面上也不看起来很出色。几次,我为了帮助一个团队成员即将上线的重要项目,将自己的项目搁浅数周甚至几个月。对团队来说这是正确的决定,但是在升职申请书中看起来并不够引人注意。在评审委员会看来,我那个同事的项目才是需要多个开发人员协调的大型重要工作。如果他们说动我来帮忙,那就说明他具备很强的领导力。我只是可有可无的临时工,工作都可以被随时打断。 我提交了第一个升职申请,结果恰如我预期:评审委员会说我没有证明自己能处理技术复杂性,也看不出我为谷歌创造了什么影响。
从拒绝中吸取教训 这次拒绝对我来说是一个沉重的打击,但我并不灰心。我觉得自己的工作水平高于级别,但是评审委员会看不到。这样的问题是可以解决的。 我决定以前两年做得太天真了。我不应该假设工作产出就能自动留下足迹。现在我了解这个过程了,我可以继续进行同样高质量的工作,但需要更好地记录。 例如,我们团队收到很多扰人的邮件报警。以前的我直接解决问题就好了。但是现在我明白,如果想在升职申请中体现这项工作,首先需要设置指标,留下历史报警频率记录。到升职时候,我就可以拿出一个报警数量逐渐下降的漂亮图表。 不久后,我获得了一个看起来很有希望的项目。这个项目深度依赖机器学习——在谷歌一直很流行的技术。它可以自动化几百名操作人员曾手动进行的任务,所以对谷歌影响明显可量化。此外,这个项目还需要我带领一个初级开发人员全程参与,这种情况通常评审委员会都看好。
圣诞礼物的启发 几个月后,谷歌停止长期以来向所有员工发放奢侈圣诞礼物的传统,这个举动曾引起很大媒体报道。这次他们将礼品预算投入Advertisement,假借慈善名义向一些贫困校园赠送Chromebook电脑。 随后,我听到两个员工的对话: 员工A说:实质上你还是获得了礼物。这类节省成本的举动会增加谷歌股票的价值。你可以选择卖掉股票奖励买任何你喜欢的礼物。 员工B说:如果我告诉我妻子,我不给她买圣诞礼物,但她可以使用我们银行账户里的钱买任何礼物,你觉得怎么样? 员工A说:你和谷歌只是一种商业关系。如果你因为谷歌不像你对妻子一样用“礼物浪漫”对待你,那么你对这种关系有个误导的看法。 等等,我和谷歌真的是一种商业关系。 这可能听起来很奇怪,需过了两年半我才意识到。实际上谷歌工作里也为了给员工营造一种共同体感。让他们感觉不仅仅是员工,而是谷歌的一份子。 但是这个对话让我意识到,我不是谷歌。我向谷歌提供服务,交换的是报酬。 所以,如果我和谷歌只是一种双向服务彼此利益的商业关系,那么我为什么过去会花时间做一些只为谷歌服务而不是自己的任务?既然评审委员会不奖励Bug修复和团队支持工作,我为什么要这么做?
优先考虑升职 首次升职失败教会我一个错误的教训。我以为只要继续做同样的工作但记录得更充分,就可以让评审委员会看好。实际上我应该做相反的事:弄清楚评审委员会期待什么,然后只做那类工作。 于是我采取了新的策略。开始任何任务前,我首先问自己这个任务是否有助于我升职。如果答案是否定的,我就不进行该任务。 我对代码质量的标准也从“这个可以维护5年吗”降低到“到我升职之前能撑住吗?”。我除非Bug有影响项目上线才解决。我抽身所有的维护工作。我减少访谈新人的次数。从每周1-2次降低到零次。
然后我的项目被取消了 优先顺序改变了。管理层把我的项目转给了印度分部队友。相应地,他们把一个项目让给我们。系统文档不完整,基础设施已被弃用,但它在生产中仍然是一个重要组件。我被要求分离系统,迁移到新框架,同时保证生产运行和性能指标。 就升职而言,这意味着任务推迟几个月。由于以前的项目没有上线任何东西,我花在上面的两个月时间一文不值。只要几周时间才能了解新系统,继而可能会浪费几个月 maintaining它。
我到底在做什么? 这是半年内第三次,经理在我项目进行半道就重新安排。每次他都说不是我工作质量的问题,而是高层战略或人员配置发生变化。 于是我从高层次思考这个问题。不考虑经理,也不考虑他的上司,更不考虑评审委员会。如果只看我和谷歌之间,我们的“商业关系”为何? 事实是,谷歌一而再再而三地告诉我,只有完成整个项目才能评判我的工作。但是我实际上无法完成任何项目,因为谷歌经常在过程中中断安排新任务。这种动态感觉很荒谬。 我的职业前途完全被一个匿名委员会把控,他们思考我不过一个小时。而我无法参与的管理决定则抹掉我几个月的工作成果。 最坏的是,我不再为工作感到自豪。不是问自己“如何解决这个有挑战的问题”,而是问“如何让这个问题看起来很难引起升职注意”。我恨这种感觉。 即使被升职,之后又如何?据说 each级别的升职难度成指数级增长。如果想在职业生涯继续前进,我必须承担更大范围和更多合作团队的项目。但是这就意味着失败因素更多,得花上月甚至年的时间才能完成。
有什么可选方案吗? 正是在这个时候,我发现了Indie Hackers社区。 它是一个面向独立软件创业者的网络社区。强调“小”。这些人不是像扎克伯格那样的梦想家,而是想搞创业维持生计的人。 我一直对独立软件公司很感兴趣,但我以为创业只有硅谷那一条路——忙于募资和担心如何吸引下一批用户。 Indie Hackers提供了一个吸引我的替代方案。大多数成员都是用自己积蓄或夜间副业的方式建立生意。他们不必回应投资人,也不必向匿名委员会证明自己。 当然也有 défauts,收入不如稳定,面临的风险更多。但这些创业者掌控自己的命运,不管生意进展如何,都由自己主导。而在谷歌,我感觉自己无法控制项目、职场进展或者团队方向。 我经过数月的思考,决定要成为一个Indie Hacker。</description>
    </item>
    <item>
      <title>什么叫TM的能力</title>
      <link>https://xxclick.github.io/post/post/think_code/</link>
      <pubDate>Wed, 30 Aug 2023 18:56:50 +0800</pubDate>
      <guid>https://xxclick.github.io/post/post/think_code/</guid>
      <description>能力究竟是什么？ 我年纪还轻，阅历不深的时候，学会了 &amp;ndash; 技术立业； 当站在纯粹技术角度，想读懂一些神奇代码，再查看git blame的时候，又发现这是 &amp;ndash; 用户第一；但我最近的理解还是四个字，只是这四个字变成了 &amp;ndash; 人情世故。
Redis的作者Antirez在其个人网站1上分享一些个人感想中，其中有一条（其实也可以顺便结合现在生成式AI的发展，看看大佬的最后一条对人工智能的预测）：
Modern programming is becoming complex, uninteresting, full of layers that just need to be glued. It is losing most of its beauty. In that sense, most programming is no longer art nor high engineering (most programs written at big and small corporations are trivial: coders just need to understand certain ad-hoc abstractions, and write some logic and glue code).</description>
    </item>
    <item>
      <title>什么叫TM的能力</title>
      <link>https://xxclick.github.io/post/think_code/</link>
      <pubDate>Wed, 30 Aug 2023 18:56:50 +0800</pubDate>
      <guid>https://xxclick.github.io/post/think_code/</guid>
      <description>能力究竟是什么？ 我年纪还轻，阅历不深的时候，学会了 &amp;ndash; 技术立业； 当站在纯粹技术角度，想读懂一些神奇代码，再查看git blame的时候，又发现这是 &amp;ndash; 用户第一；但我最近的理解还是四个字，只是这四个字变成了 &amp;ndash; 人情世故。
Redis的作者Antirez在其个人网站1上分享一些个人感想中，其中有一条（其实也可以顺便结合现在生成式AI的发展，看看大佬的最后一条对人工智能的预测）：
Modern programming is becoming complex, uninteresting, full of layers that just need to be glued. It is losing most of its beauty. In that sense, most programming is no longer art nor high engineering (most programs written at big and small corporations are trivial: coders just need to understand certain ad-hoc abstractions, and write some logic and glue code).</description>
    </item>
    <item>
      <title>贾里尼克的故事</title>
      <link>https://xxclick.github.io/post/frederick_jelinek_story/</link>
      <pubDate>Fri, 25 Aug 2023 20:52:13 +0800</pubDate>
      <guid>https://xxclick.github.io/post/frederick_jelinek_story/</guid>
      <description>吴军博士在《数学之美》里对自己的恩师的纪念 。 很感动 。电子版不全，手动敲了一部分。以下为原文：
谨以本章纪念弗里德里克.贾里尼克博士 1932 年 11 月 18 日&amp;ndash; 2010 年 9 月 14 日
最初在“谷歌黑板报”上发表“数学之美”系列文章时，为了引起读者的兴趣，我介绍了一些成功将数学原理运用于自然语言处理领域的大师和学者。但我的根本目的不是单纯地讲故事或聊八卦，而是为了给有志于信息领域研究的年轻人介绍一批大师和成功者，让大家学到他们的思维方法，从而获得他们那样的成功。在当今物欲横流的中国社会，学术界浮躁，年轻人焦虑，少数有着远大志向的年轻人实际上是非常孤独的。这很像罗曼.罗兰笔下一战后的法国。罗曼.罗兰为那些追求灵魂高尚而非物质富裕的年轻人写下了《巨人三转》，让大家呼吸道巨人的气息。今天，我希望把一批大师介绍给有志学子。我们从弗莱德里克.贾里尼克开始。
按顺序读到这章的读者也许注意到了，我们在前面的章节中多次提到了贾里尼克这个名字。事实上，现代语音识别和自然语言处理确实是和它的名字是紧密联系在一起的。在这里我不想列举他的贡献，而想讲一讲他作为一个普通人的故事。这些事要么是我亲身经历的，要么是他亲口对我讲的。
1.早年生活 弗莱德里克.贾里尼克(Fred Jelinek)出生于捷克一个富有的犹太家庭。他的父母原本打算送他去英国的公学（私立学校）读书。为了教他德语，还专门请的一 位德国的家庭女教师，但是第二次世界大战完全打碎了他们的梦想。他们先是被从家中赶了出去，流浪到布拉格。他的父亲死在了集中营，弗莱德自己成天在街上玩耍，完全荒废了学业。二战后，当他再度回到学校时，他的成绩一塌糊涂，全部是 D，但是很快他就赶上了班上的同学。不过，他在小学时从来没有得过 A。
1946 年，他的母亲带领全家移民美国。在美国，贾里尼克一家生活非常贫困，全家基本是靠母亲做点心卖钱为生，弗莱德自己十四五岁就进工厂打工补助全家。显然，他没有（可能）天天待在教师和家里，没把时间都花在课本上，他在上大学前花在读书上的时间恐怕连现在一般好学生的一半都不到。当然，我自己在小学（文革阶段）和中学（20 世纪 80 年代）花在课本上的时间也不到现在学生的一半。所以我们都不赞成中小学生只会上学考试的教育方式。
每当弗莱德和我谈起各自少年时的教育。我们同意这样几个观点。首先，小学生和中学生其实没必要花那么多时间读书，而他们的社会经验，生活能力以及在那时树立起来的志向将帮他们一生。第二，中学阶段花很多时间比同伴多读的课程，上大学以后用很短的时间就能读完。,因为在大学阶段，人多理解能力要强得多。举个例子，在中学需要花 500 个小时才能学会的内容，在大学可能花 100 个小时就够了。因此，一个学生在中学阶段建立的那一点点优势在大学很快就会丧失殆尽。第三，学习（和教育）是持续一辈子的过程，许多中学成绩优异的亚裔学生进入名校后表现明显不如那些出于兴趣而读书的美国同伴，因为前者持续学习的动力不足。第四，书本的东西可以早学，也可以晚学，但错过了成长阶段却是无法不会来的。（因此，少年班的做法不可取。）现在中国好的学校里，恐怕百分之九十九的孩子在读书上花的时间都比我当时要多，更比贾里尼克要多得多，但这些孩子今天可能有百分之九十九在学术上的建树不如我，更不如贾里尼克，这实在是教育的误区。
贾里尼克十来岁时就有了最早的理想，成为一个律师，为他父亲那样的冤屈者辩护，但他很快意识到他那浓厚的外国口音将使他在法庭上的辩护很吃力。贾里尼克的第二个理想是成为医生，他想进哈佛大学医学院，但经济上他无法承担医学院 8 年高昂的学费。与此同时麻省理工学院给予了他一份（为东欧移民设的）全额奖学金。贾里尼克决定到麻省理工学电机工程。
在那里，他遇到了许多世界级的大师，包括信息论的鼻祖香农博士，和语言学大师贾格布森 Roman Jakobson (他提出了著名的通信六要素），后来贾里尼克又陪着太太听最伟大的语言学家乔姆斯基(Noam Chomsky)的课。这三位大师对贾里尼克今后的研究方向&amp;ndash;利用信息论解决语言问题产生了重要影响。我一直认为一个人想要在自己的领域做到世界一流，他的周围必须有非常多的一流人物。贾里尼克的幸运之处在于年轻时就得到了这些大师的指点，以后在研究境界上比同龄人高出了一筹。
贾里尼克从麻省理工获得博士学位后，在哈佛大学教了一年书，然后到康乃尔大学任教。他之所以选择康乃尔大学，是因为找工作时和那里的一位语言学家谈得颇为投机。当时那位教授表示愿意和贾里尼克在利用信息论解决语言问题上合作。但是，等贾里尼克到康乃尔以后，那位教授表示对语言学在没有兴趣了而转向写歌剧。贾里尼克对语言学家的坏印象从此开始。加上后来他在 IBM 时发现语言学家们嘴上头头是道，干起活来高不成低不就，对语言学家从此深恶痛绝。他甚至说：&amp;ldquo;我每开除一名语言学家，我的语音识别系统错误率就降低一个百分点。&amp;rdquo; 这句话后来在业界广为流传，为每一个搞语音识别和语言处理的人所熟知。
2.从水门事件到莫妮卡.莱温斯基 这个标题不是我为了哗众取宠而起的，而是贾里尼克在 1999 年 ICASSP 做的大会报告的题目 ，因为水门事件发生的时间（1972 年）恰恰是统计语音识别和自然语言处理开始的时间，而因莱温斯基事件弹劾克林顿总统也正好发生于当时会议前一年。
贾里尼克在康乃尔十年磨一剑，潜心研究信息论，终于悟出了自然语言处理的真谛。１９７２年，贾里尼克到ＩＢＭ 华生实验室（ＩＢＭ Ｔ．Ｇ．Ｗａｔｓｏｎ Ｌａｂｓ）做学术休假，无意中领导了语音识别实验室，两年后他在康乃尔和ＩＢＭ 之间选择了留在ＩＢＭ。在那里，贾里尼克组建了阵容空前绝后强大的研究队伍，其中包括他的著名搭档波尔（Bahl），著名的语音识别 Dragon 公司的创始人贝克夫妇，解决最大熵迭代算法的达拉皮垂(Della Pietra)孪生兄弟，BCJR 算法的另外两个共同提出者库克(Cocke)和拉维夫(Raviv)，以及第一个提出机器翻译统计模型的布朗。就连当年资历最浅的小字辈拉法特现在都成了了不起的学者。
上个世纪七十年代的 IBM 有点像九十年代的微软和今天的 Google, 给予杰出科学家做任何有兴趣研究的自由。在那种宽松的环境里，贾里尼克等人提出了统计语音识别的框架结构。 在贾里尼克以前，科学家们把语音识别问题当作人工智能问题和模式匹配问题。而贾里尼克把它当成通信问题，并用两个隐含马尔可夫模型（声学模型和语言模型） 把语音识别概括得清清楚楚。这个框架结构对至今的语音和语言处理有着深远的影响，它从根本上使得语音识别有实用的可能。贾里尼克本人后来也因此当选美国工程院院士。并被 Techology 杂志评为 20 世纪 100 名发明家之一。</description>
    </item>
    <item>
      <title>贾里尼克的故事</title>
      <link>https://xxclick.github.io/post/post/frederick_jelinek_story/</link>
      <pubDate>Fri, 25 Aug 2023 20:52:13 +0800</pubDate>
      <guid>https://xxclick.github.io/post/post/frederick_jelinek_story/</guid>
      <description>吴军博士在《数学之美》里对自己的恩师的纪念 。 很感动 。电子版不全，手动敲了一部分。以下为原文：
谨以本章纪念弗里德里克.贾里尼克博士 1932 年 11 月 18 日&amp;ndash; 2010 年 9 月 14 日
最初在“谷歌黑板报”上发表“数学之美”系列文章时，为了引起读者的兴趣，我介绍了一些成功将数学原理运用于自然语言处理领域的大师和学者。但我的根本目的不是单纯地讲故事或聊八卦，而是为了给有志于信息领域研究的年轻人介绍一批大师和成功者，让大家学到他们的思维方法，从而获得他们那样的成功。在当今物欲横流的中国社会，学术界浮躁，年轻人焦虑，少数有着远大志向的年轻人实际上是非常孤独的。这很像罗曼.罗兰笔下一战后的法国。罗曼.罗兰为那些追求灵魂高尚而非物质富裕的年轻人写下了《巨人三转》，让大家呼吸道巨人的气息。今天，我希望把一批大师介绍给有志学子。我们从弗莱德里克.贾里尼克开始。
按顺序读到这章的读者也许注意到了，我们在前面的章节中多次提到了贾里尼克这个名字。事实上，现代语音识别和自然语言处理确实是和它的名字是紧密联系在一起的。在这里我不想列举他的贡献，而想讲一讲他作为一个普通人的故事。这些事要么是我亲身经历的，要么是他亲口对我讲的。
1.早年生活 弗莱德里克.贾里尼克(Fred Jelinek)出生于捷克一个富有的犹太家庭。他的父母原本打算送他去英国的公学（私立学校）读书。为了教他德语，还专门请的一 位德国的家庭女教师，但是第二次世界大战完全打碎了他们的梦想。他们先是被从家中赶了出去，流浪到布拉格。他的父亲死在了集中营，弗莱德自己成天在街上玩耍，完全荒废了学业。二战后，当他再度回到学校时，他的成绩一塌糊涂，全部是 D，但是很快他就赶上了班上的同学。不过，他在小学时从来没有得过 A。
1946 年，他的母亲带领全家移民美国。在美国，贾里尼克一家生活非常贫困，全家基本是靠母亲做点心卖钱为生，弗莱德自己十四五岁就进工厂打工补助全家。显然，他没有（可能）天天待在教师和家里，没把时间都花在课本上，他在上大学前花在读书上的时间恐怕连现在一般好学生的一半都不到。当然，我自己在小学（文革阶段）和中学（20 世纪 80 年代）花在课本上的时间也不到现在学生的一半。所以我们都不赞成中小学生只会上学考试的教育方式。
每当弗莱德和我谈起各自少年时的教育。我们同意这样几个观点。首先，小学生和中学生其实没必要花那么多时间读书，而他们的社会经验，生活能力以及在那时树立起来的志向将帮他们一生。第二，中学阶段花很多时间比同伴多读的课程，上大学以后用很短的时间就能读完。,因为在大学阶段，人多理解能力要强得多。举个例子，在中学需要花 500 个小时才能学会的内容，在大学可能花 100 个小时就够了。因此，一个学生在中学阶段建立的那一点点优势在大学很快就会丧失殆尽。第三，学习（和教育）是持续一辈子的过程，许多中学成绩优异的亚裔学生进入名校后表现明显不如那些出于兴趣而读书的美国同伴，因为前者持续学习的动力不足。第四，书本的东西可以早学，也可以晚学，但错过了成长阶段却是无法不会来的。（因此，少年班的做法不可取。）现在中国好的学校里，恐怕百分之九十九的孩子在读书上花的时间都比我当时要多，更比贾里尼克要多得多，但这些孩子今天可能有百分之九十九在学术上的建树不如我，更不如贾里尼克，这实在是教育的误区。
贾里尼克十来岁时就有了最早的理想，成为一个律师，为他父亲那样的冤屈者辩护，但他很快意识到他那浓厚的外国口音将使他在法庭上的辩护很吃力。贾里尼克的第二个理想是成为医生，他想进哈佛大学医学院，但经济上他无法承担医学院 8 年高昂的学费。与此同时麻省理工学院给予了他一份（为东欧移民设的）全额奖学金。贾里尼克决定到麻省理工学电机工程。
在那里，他遇到了许多世界级的大师，包括信息论的鼻祖香农博士，和语言学大师贾格布森 Roman Jakobson (他提出了著名的通信六要素），后来贾里尼克又陪着太太听最伟大的语言学家乔姆斯基(Noam Chomsky)的课。这三位大师对贾里尼克今后的研究方向&amp;ndash;利用信息论解决语言问题产生了重要影响。我一直认为一个人想要在自己的领域做到世界一流，他的周围必须有非常多的一流人物。贾里尼克的幸运之处在于年轻时就得到了这些大师的指点，以后在研究境界上比同龄人高出了一筹。
贾里尼克从麻省理工获得博士学位后，在哈佛大学教了一年书，然后到康乃尔大学任教。他之所以选择康乃尔大学，是因为找工作时和那里的一位语言学家谈得颇为投机。当时那位教授表示愿意和贾里尼克在利用信息论解决语言问题上合作。但是，等贾里尼克到康乃尔以后，那位教授表示对语言学在没有兴趣了而转向写歌剧。贾里尼克对语言学家的坏印象从此开始。加上后来他在 IBM 时发现语言学家们嘴上头头是道，干起活来高不成低不就，对语言学家从此深恶痛绝。他甚至说：&amp;ldquo;我每开除一名语言学家，我的语音识别系统错误率就降低一个百分点。&amp;rdquo; 这句话后来在业界广为流传，为每一个搞语音识别和语言处理的人所熟知。
2.从水门事件到莫妮卡.莱温斯基 这个标题不是我为了哗众取宠而起的，而是贾里尼克在 1999 年 ICASSP 做的大会报告的题目 ，因为水门事件发生的时间（1972 年）恰恰是统计语音识别和自然语言处理开始的时间，而因莱温斯基事件弹劾克林顿总统也正好发生于当时会议前一年。
贾里尼克在康乃尔十年磨一剑，潜心研究信息论，终于悟出了自然语言处理的真谛。１９７２年，贾里尼克到ＩＢＭ 华生实验室（ＩＢＭ Ｔ．Ｇ．Ｗａｔｓｏｎ Ｌａｂｓ）做学术休假，无意中领导了语音识别实验室，两年后他在康乃尔和ＩＢＭ 之间选择了留在ＩＢＭ。在那里，贾里尼克组建了阵容空前绝后强大的研究队伍，其中包括他的著名搭档波尔（Bahl），著名的语音识别 Dragon 公司的创始人贝克夫妇，解决最大熵迭代算法的达拉皮垂(Della Pietra)孪生兄弟，BCJR 算法的另外两个共同提出者库克(Cocke)和拉维夫(Raviv)，以及第一个提出机器翻译统计模型的布朗。就连当年资历最浅的小字辈拉法特现在都成了了不起的学者。
上个世纪七十年代的 IBM 有点像九十年代的微软和今天的 Google, 给予杰出科学家做任何有兴趣研究的自由。在那种宽松的环境里，贾里尼克等人提出了统计语音识别的框架结构。 在贾里尼克以前，科学家们把语音识别问题当作人工智能问题和模式匹配问题。而贾里尼克把它当成通信问题，并用两个隐含马尔可夫模型（声学模型和语言模型） 把语音识别概括得清清楚楚。这个框架结构对至今的语音和语言处理有着深远的影响，它从根本上使得语音识别有实用的可能。贾里尼克本人后来也因此当选美国工程院院士。并被 Techology 杂志评为 20 世纪 100 名发明家之一。</description>
    </item>
  </channel>
</rss>
